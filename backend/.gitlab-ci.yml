# include:
#   - template: Security/SAST.gitlab-ci.yml

stages: 
  - build  #сборка
#  - test #test
  - notify  #уведомление1
  - release
  - deploy

cache:
  paths:
    - ${CI_PROJECT_DIR}/.m2/repository

variables:
  MAVEN_OPTS: "-Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository"
  VERSION: 1.0.${CI_PIPELINE_ID} # добавил перменную версия
  MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository
  JAVA_OPTS: -XX:MaxRAMPercentage=90 # для того, чтобы Maven не съел всю свободную оперативку



build-backend-code-job-new: #задача с именем build-backend-code-job
  stage: build
  only:
    changes: 
    - backend/**/* #только для изменений в директории backend
    - kubernetes/backend/**/*
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]
  # переменные CI_REGISTRY_USER, CI_REGISTRY_PASSWORD, CI_REGISTRY генерятся Гитлабом, их задавать не надо
  script: 
    - echo "test"
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}/backend"
      --dockerfile "${CI_PROJECT_DIR}/backend/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/sausage-backend:$CI_COMMIT_SHA"
      --build-arg VERSION=$VERSION
      --cache=true
    - echo "$CI_REGISTRY_IMAGE"


# build-backend-code-job: #задача с именем build-backend-code-job
#   stage: build  #этап build
#   only: 
#     changes:
#     - backend/**/* #только для изменений в директории backend
#   script:
#     - cd backend
#     - "mvn package -Dmaven.test.skip=true -Dspring.flyway.enabled=true -Dmaven.repo.local=${CI_PROJECT_DIR}/.m2/repository -Dversion.application=${VERSION}" # добавил еще 2 параметра сюда
#     - echo "PREV_JOB_ID=${CI_JOB_ID}" >> ${CI_PROJECT_DIR}/build.env #доавил тут ci_project_dir
#   #  - ls -lah - выполнял проверки, дебаг
#   #  - pwd - выполнял проверки, дебаг
#   #  - echo "The BACK_CI_JOB_ID is ${CI_PROJECT_DIR}" - проверка, что записано в переменную
#   artifacts:
#     paths:
#       - backend/target/sausage-store-${VERSION}.jar  #сохранение собранного бэкенда как артефакта 
#     expire_in: 1 day # указал срок хранения для артефакта
#     reports:
#       dotenv: ${CI_PROJECT_DIR}/build.env   #добавил тут переменную CI_PROJECT_DIR, так как на пердыдущем шаге записал переменную в директорию CI_PROJECT_DIR
#   cache:
#     paths:
#       - ${CI_PROJECT_DIR}/.m2/repository



# spotbugs-sast:  #задача с именем spotbugs-sast
#   variables: 
#     COMPILE: "false"
#     SAST_JAVA_VERSION: 11
#     MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository # не забудьте при сборке также указывать эту папку через аргумент -Dmaven.repo.local 
#   stage: test
#   script: pwd
#   needs: 
#     - build-backend-code-job
    



# sonarqube-backend-sast:
#   variables: 
#     MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository
#   stage: test
#   image: maven:3.8-openjdk-16 #образ
#   script:
#     - cd backend
#     - "mvn --batch-mode verify sonar:sonar 
#     -Dmaven.test.skip=true
#     -Dspring.flyway.enabled=false
#     -Dmaven.repo.local=${CI_PROJECT_DIR}/.m2/repository
#     -Dsonar.projectName=${SONAR_PROJECT_NAME_BACKEND} 
#     -Dsonar.host.url=${SONARQUBE_URLBACKEND} 
#     -Dsonar.login=${SONAR_LOGIN_BACKEND}
#     -Dsonar.projectKey=${SONAR_PROJECT_KEY_BACKEND}
#     -Dsonar.qualitygate.wait=true" #параметры
#   needs:
#     - build-backend-code-job


release:
  variables:
    GIT_STRATEGY: none
  image:
    name: gcr.io/go-containerregistry/crane:debug
    entrypoint: [ "" ]
  cache: [ ]
  stage: release
  before_script:
    - crane auth login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - crane tag $CI_REGISTRY_IMAGE/sausage-backend:$CI_COMMIT_SHA latest

deploy-backend:
  stage: deploy
  image: alpine:3.18
  before_script:
    - apk add gettext
    - apk add openssh-client bash
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
# подставим переменные в скрипт deploy.sh и выполним его на целевом хосте, где развернем сосисочный бэкенд
  script:    
    - ssh ${DEV_USER}@${DEV_HOST} "mkdir -p /home/student/sausage-store2"
    - scp -r kubernetes/backend ${DEV_USER}@${DEV_HOST}:/home/student/sausage-store2/
    - envsubst < ./backend/deploy.sh|ssh ${DEV_USER}@${DEV_HOST} 
  

# telegram-notification-backend: #задача с именем telegram-notification-backend
#   variables:
#       TEXT: "Андрей Николаев собрал backend ${CI_PROJECT_URL}/-/jobs/${PREV_JOB_ID}/artifacts/download" #обьявление перменных, где ci_project_url - урл проекта, prev_job_id - переменная, обявленная в джобе build-backend-code-job и сохраненная в {CI_PROJECT_DIR}/build.env
#       TLGRM: "https://api.telegram.org/bot5933756043:AAE8JLL5KIzgrNBeTP5e-1bkbJy4YRoeGjs/sendMessage"
#   stage: notify #этап уведомлений
#   only:
#     changes:
#     - backend/* #только для изменений в директории backend
#     variables: #РАСКОМЕНТИТЬ НЕ ЗАБУДЬ ЭТУ СТРОКУ И СЛЕДУЮЩУЮ!!!!!!!!!!!!
#     - $CI_COMMIT_MESSAGE =~ /send notification/ # только для изменений содержащих в сообщении коммита "send notification"
#   script:
#      # - echo "The BACK_CI_JOB_ID is ${CI_PROJECT_DIR}" - проверки, при помощи которых опредлял CI_PROJECT_DIR
#      # - echo "The BACK_CI_JOB_ID is $PREV_JOB_ID" - проверки, при помощи которых я определял, что записано в переменную prev_job_id
#       - 'curl -X POST -H "Content-type: application/json" --data "{\"chat_id\": \"-1002134018008\", \"text\": \"${TEXT}\" }" ${TLGRM}' #отправка курлом сообщения методом post
#      # - ls -lah - дополнительные проверки
#      # - pwd - дополнительные проверки
#   needs:
#     - build-backend-code-job # прописываем зависимость от джоба с именем build-backend-code-job
# #добавил изменения для проверки



# upload-backend-release:
#   stage: release
#   only:
#     changes:
#       - backend/**/*
#   needs:
#     - build-backend-code-job
#   script:
#     - cd backend
#     - "mvn deploy -DskipTests
#    -Dmaven.repo.local=${CI_PROJECT_DIR}/.m2/repository
#    -s settings.xml -Dversion.application=${VERSION}"
