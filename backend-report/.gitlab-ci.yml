include:
  - template: Security/SAST.gitlab-ci.yml

stages: 
  - build  #сборка
  - test #test
  - notify  #уведомление
  - release
  - deploy

cache:
  paths:
    - ${CI_PROJECT_DIR}/.m2/repository

variables:
  MAVEN_OPTS: "-Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository"
  VERSION: 1.0.${CI_PIPELINE_ID} # добавил перменную версия
  MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository
  JAVA_OPTS: -XX:MaxRAMPercentage=90 # для того, чтобы Maven не съел всю свободную оперативку



build-backend-report-code-job: #задача с именем build-backend-report-code-job
  stage: build
  only:
    changes: 
    - backend-report/**/* #только для изменений в директории backend
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]
  # переменные CI_REGISTRY_USER, CI_REGISTRY_PASSWORD, CI_REGISTRY генерятся Гитлабом, их задавать не надо
  script: 
    - echo "test"
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}/backend-report"
      --dockerfile "${CI_PROJECT_DIR}/backend-report/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/sausage-backend-report:$CI_COMMIT_SHA"
      --build-arg VERSION=$VERSION
      --cache=true
    - echo "$CI_REGISTRY_IMAGE"


release:
  variables:
    GIT_STRATEGY: none
  image:
    name: gcr.io/go-containerregistry/crane:debug
    entrypoint: [ "" ]
  cache: [ ]
  stage: release
  before_script:
    - crane auth login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - crane tag $CI_REGISTRY_IMAGE/sausage-backend-report:$CI_COMMIT_SHA latest

deploy-backend:
  stage: deploy
  image: alpine:3.18
  before_script:
    - apk add gettext
    - apk add openssh-client bash
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
# подставим переменные в скрипт deploy.sh и выполним его на целевом хосте, где развернем сосисочный бэкенд
  script:    
    - ssh ${DEV_USER}@${DEV_HOST} "mkdir -p /home/student/${CI_PROJECT_DIR}"
    - scp docker-compose.yml ${DEV_USER}@${DEV_HOST}:/home/student/${CI_PROJECT_DIR}/docker-compose.yml
    - envsubst < ./backend-report/deploy.sh|ssh ${DEV_USER}@${DEV_HOST} 
  

telegram-notification-backend: #задача с именем telegram-notification-backend
  variables:
      TEXT: "Андрей Николаев собрал backend ${CI_PROJECT_URL}/-/jobs/${PREV_JOB_ID}/artifacts/download" #обьявление перменных, где ci_project_url - урл проекта, prev_job_id - переменная, обявленная в джобе build-backend-code-job и сохраненная в {CI_PROJECT_DIR}/build.env
      TLGRM: "https://api.telegram.org/bot5933756043:AAE8JLL5KIzgrNBeTP5e-1bkbJy4YRoeGjs/sendMessage"
  stage: notify #этап уведомлений
  only:
    changes:
    - backend/* #только для изменений в директории backend
    variables: #РАСКОМЕНТИТЬ НЕ ЗАБУДЬ ЭТУ СТРОКУ И СЛЕДУЮЩУЮ!!!!!!!!!!!!
    - $CI_COMMIT_MESSAGE =~ /send notification/ # только для изменений содержащих в сообщении коммита "send notification"
  script:
     # - echo "The BACK_CI_JOB_ID is ${CI_PROJECT_DIR}" - проверки, при помощи которых опредлял CI_PROJECT_DIR
     # - echo "The BACK_CI_JOB_ID is $PREV_JOB_ID" - проверки, при помощи которых я определял, что записано в переменную prev_job_id
      - 'curl -X POST -H "Content-type: application/json" --data "{\"chat_id\": \"-1002134018008\", \"text\": \"${TEXT}\" }" ${TLGRM}' #отправка курлом сообщения методом post
     # - ls -lah - дополнительные проверки
     # - pwd - дополнительные проверки
  needs:
    - build-backend-code-job # прописываем зависимость от джоба с именем build-backend-code-job
#добавил изменения для проверки

