stages:
  - build #сборка
  - test #test
  - notify #уведомление
  - release
  - deploy

variables:
  VERSION: 1.0.${CI_PIPELINE_ID} # добавил перменную версия

build-frontend-code-job-new: #задача с именем build-frontend-code-job
  stage: build
  only:
    changes: 
    - frontend/**/* #только для изменений в директории frontend
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]
  # переменные CI_REGISTRY_USER, CI_REGISTRY_PASSWORD, CI_REGISTRY генерятся Гитлабом, их задавать не надо
  script: 
    - echo "test"
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}/frontend"
      --dockerfile "${CI_PROJECT_DIR}/frontend/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/sausage-frontend:$CI_COMMIT_SHA"
      --build-arg VERSION=$VERSION
      --cache=true
    - echo "$CI_REGISTRY_IMAGE"

build-frontend-code-job: #задача с именем build-frontend-code-job
  stage: build   #этап build
  only:
    changes:
    - frontend/**/* #только для изменений в директории frontend

  script: # объявление скрипта
    - cd frontend
    - npm install # загрузка всех сторонних зависимостей
    - npm run build # запуск сборки кода
    - echo "PREV_JOB_ID=${CI_JOB_ID}" >> ${CI_PROJECT_DIR}/build.env #доавил тут ci_project_dir
  artifacts:
    paths:
      - frontend/dist/frontend #сохранение собранного frontend как артефакта 
    reports:
      dotenv: ${CI_PROJECT_DIR}/build.env #добавил тут переменную CI_PROJECT_DIR, так как на пердыдущем шаге записал переменную в директорию CI_PROJECT_DIR
  cache:
    paths:
      - .npm/


sonarqube-frontend-sast:
  stage: test
  image:
    name: sonarsource/sonar-scanner-cli:latest #образ
  script: 
    - cd frontend
    - pwd
    - ls -lah
    - "sonar-scanner
    -Dsonar.projectName=${SONAR_PROJECT_NAME_FRONTEND} 
    -Dsonar.host.url=${SONAR_HOST_URL_FRONTEND} 
    -Dsonar.login=${SONAR_LOGIN_FRONTEND}
    -Dsonar.projectKey=${SONAR_PROJECT_KEY_FRONTEND}
    -Dsonar.sources=${SONAR_SOURCES_FRONTEND}"
    #- pwd
    #- ls -lah
#    -Dsonar.qualitygate.wait=true" #ошибочно добавил
  needs:
    - build-frontend-code-job # прописываем зависимость от джоба с именем build-frontend-code-job




telegram-notification-frontend: #задача с именем telegram-notification-frontend
  variables:
      TEXT: "Андрей Николаев собрал frontend ${CI_PROJECT_URL}/-/jobs/$PREV_JOB_ID/artifacts/download" #обьявление перменных, где ci_project_url - урл проекта, prev_job_id - переменная, обявленная в джобе build-frontend-code-job и сохраненная в {CI_PROJECT_DIR}/build.env
      TLGRM: "https://api.telegram.org/bot5933756043:AAE8JLL5KIzgrNBeTP5e-1bkbJy4YRoeGjs/sendMessage"
  stage: notify #этап уведомлений
  only:
    changes:
    - frontend/* #только для изменений в директории frontend
    variables:
    - $CI_COMMIT_MESSAGE =~ /send notification/ # только для изменений содержащих в сообщении коммита "send notification"
  script:
  #  - echo "The PREV_JOB_ID is ${PREV_JOB_ID}"  проверки, при помощи которых я определял, что записано в переменную prev_job_id
    - 'curl -X POST -H "Content-type: application/json" --data "{\"chat_id\": \"-1002134018008\", \"text\": \"${TEXT}\" }" ${TLGRM}' #отправка курлом сообщения методом post
  needs:
    - build-frontend-code-job # прописываем зависимость от джоба с именем build-frontend-code-job


release:
  variables:
    GIT_STRATEGY: none
  image:
    name: gcr.io/go-containerregistry/crane:debug
    entrypoint: [ "" ]
  cache: [ ]
  stage: release
  before_script:
    - crane auth login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - crane tag $CI_REGISTRY_IMAGE/sausage-frontend:$CI_COMMIT_SHA latest

upload-frontend-release:
  stage: release
  only:
    changes:
    - frontend/**/*
  needs:
    - build-frontend-code-job
  script:
    - cd frontend/dist
    - tar czvf sausage-store-${VERSION}.tar.gz frontend
    - 'curl -v -u "${NEXUS_REPO_USER}:${NEXUS_REPO_PASS}"
   --upload-file sausage-store-${VERSION}.tar.gz
   ${NEXUS_REPO_URL}/${NEXUS_REPO_FRONTEND_NAME}/${VERSION}/sausage-store-${VERSION}.tar.gz'


deploy-frontend:
  stage: deploy
  image: alpine:3.18
  before_script:
    - sleep 400
    - apk add gettext
    - apk add openssh-client bash
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
# подставим переменные в скрипт deploy.sh и выполним его на целевом хосте, где развернем сосисочный бэкенд
  script:    
    - ssh ${DEV_USER}@${DEV_HOST} "mkdir -p /home/student/${CI_PROJECT_DIR}/frontend/"
    - scp ./frontend/default.conf ${DEV_USER}@${DEV_HOST}:/home/student/${CI_PROJECT_DIR}/frontend/default.conf 
    - envsubst < ./frontend/deploy.sh|ssh ${DEV_USER}@${DEV_HOST} 


    

